#!/bin/bash
#############################################################################
# Author  : P.A.Massey (paul.massey@tenforce.com)
# Date    : 10/02/2014
# Purpose : Given a JAR - convert it into a .DEB package which can be 
#           installed.
#
# csv file format:
#    JARFILE(href) groupid artifactid version
#
#############################################################################

function help {
    echo $0 " -i -l -h -s
      -h               : this message
      -v               : verbose
      -A <artifactid>  : artifactid
      -G <groupid>     : groupid
      -V <versionid>   : JAR file version
      -M <maintainer>  : The name of the maintainer
      -H <homepage>    : URL of the homepage
      -D <description> : Description of the Package (default will be included)
      -P <packageid>   : PackageID to use
      -J <jarfile>     : The jarfile to be put in the package.
      -F <file>        : csv file with list of jar pointers
" 
    exit 1;
}

if [ $# -eq 0 ] ; then 
		echo "Error: No parameters specified"
    help
fi

#############################################################################
MAINTAINER=${DEBNAME}
ARTIFACTID=unknownartid
GROUPID=unknowngrpid
FILE=

while getopts "hvaA:G:V:M:H:D:P:J:F:" arg; do
    case $arg in
        h) shift ; help ;;
				v) shift ; set -x ;;
				A) shift ; ARTIFACTID=$1 ; shift ;;
				G) shift ; GROUPID=$1 ; shift ;;
				V) shift ; VERSIONID=$1 ; shift ;;
				M) shift ; MAINTAINER=$1 ; shift ;;
				H) shift ; HOMEPAGE=$1 ; shift ;;
				D) shift ; DESCRIPTION=$1 ; shift ;;
				P) shift ; PACKAGEID=$1 ; shift ;;
				J) shift ; JARFILE=$1 ; shift ;;
				F) shift ; FILE=$1; shift;;
				*) shift ;  help ;;
    esac
    OPTIND=1;
done

echo ${GROUPID} ${JARFILE} ${ARTIFACTID}

#############################################################################
# Recover an attribute value from the JAR MANIFEST.MF file which will be
# assumed to be unpacked already (in current directory).

function getattribute_value {
    LINE=`egrep $2 $1/META-INF/MANIFEST.MF`
    echo $LINE | awk -F: '{print $2;}' -
}

#############################################################################
# Create the basic BINARY control file, using the default values passed in.

function create_binary_control {
    local DEBIAN=$1
    local PACKAGE=$2
    local VERSIONID=$3
    local MAINTAINER=$4
    local DESCRIPTION=${DESCRIPTION}
    echo "Package: ${PACKAGE:-unknown-package}
Version: ${VERSIONID:-0.1}
Section: java
Priority: optional
Architecture: all
Maintainer: ${MAINTAINER:-unknown_maintainer}
Description: ${DESCRIPTION:-Wrapper package for a JAR file}
" > ${DEBIAN}/control
}

#############################################################################

function create_debian {
    local PNAME=$2
    local PAUTH=${DEBNAME:-undef_DEBNAME}
    local PEMAIL=${DEBEMAIL:-undef_DEBEMAIL}
    local PVERSION=$3
    mkdir -p DEBIAN
    create_binary_control DEBIAN ${PNAME} ${PVERSION} ${PAUTH} ${PEMAIL}
}

#############################################################################

function create_pom {
    local LOCATION=$1
    local GROUPID=$2
    local ARTIFACTID=$3
    local PACKAGE=$4
    local VERSION=$5

    echo "<?xml version='1.0' encoding='UTF-8'?>
<project xmlns=\"http://maven.apache.org/POM/4.0.0\" 
         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" 
         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4_0_0.xsd\">
	<modelVersion>4.0.0</modelVersion>
	<groupId>${GROUPID}</groupId>
	<artifactId>${ARTIFACTID}</artifactId>
	<version>${VERSION}</version>
	<packaging>jar</packaging>
	<properties>
		<debian.hasPackageVersion/>
		<debian.originalVersion>${VERSION}</debian.originalVersion>
		<debian.package>${PACKAGE}</debian.package>
	</properties>
	<name>Auto packaged JAR file</name>
</project>
" > ${LOCATION}/pom.xml
}

#############################################################################

function build_package {
    echo "build_package: start attempt - $1"
    dpkg-deb --build $1
}

#############################################################################

function validate_package {
    echo "validate_package: not done"
}

#############################################################################

function jar2deb { # jarfile groupid artifactid version
    projgrpid=$2
    projartid=$3
    projvsnid=$4
    echo "*** JAR-$1 ${projgrpid} ${projartid} ${projvsnid} FILES-$5"
    injarfile=$1;
    inbasejarfile=`basename ${injarfile} .jar`
    # rm -rf ${tempdir}

    ORIGMAINDIR=${projartid:-$2}-${projvsnid:-$3}

    MAINDIR=lib${projartid:-$2}_${projvsnid:-$3}-java
    echo orig-main-dir:${ORIGMAINDIR}
    
    ########################################################################
    # Create the "fake original" structure

    mkdir -p ${ORIGMAINDIR}/usr/share/java
    cp ${injarfile} ${ORIGMAINDIR}/usr/share/java
    
    pushd ${ORIGMAINDIR}/usr/share/java > /dev/null ;
     ln -s ${injarfile} ${projartid}.jar ;
     pprojgrpid=`echo ${projgrpid} | tr "." "/"`
     # Reduce the projartid to a relative path form.
     lpath=`echo ${projgrpid} | awk -F. '{ for(i=1;i<=NF;i++) print ".."; }' | tr "\\n" "/"`
     mkdir -p ../maven-repo/${pprojgrpid}/debian
     pushd  ../maven-repo/${pprojgrpid} > /dev/null

      create_pom . ${projgrpid} ${projartid} ${MAINDIR} ${projvsnid}
      # Relative paths are used in the links so that the eventual
      # unpacking will work okay.
      ln -s ../../${lpath}java/${injarfile} debian/${projartid}.jar ;
      create_pom debian ${projgrpid} ${projartid} ${MAINDIR} debian
      ln -s ../${lpath}java/${injarfile} ${projartid}.jar 

     popd > /dev/null
     # tar cvzf ${ORIGMAINDIR}.orig.tgz ${ORIGMAINDIR} 
    popd > /dev/null

    #########################################    
    # Now build the MAIN package structure
    mv ${ORIGMAINDIR} ${MAINDIR}
    ( cd ${MAINDIR}
      create_debian ${MAINDIR} ${projartid:-$2} ${projvsnid:-$3} )

    #########################################    
    build_package ${MAINDIR} 
    validate_package
}

#############################################################################
if [ "x${FILE}x" != "xx" ]
then
    echo "*** Recovering details from ${FILE}"

    IFS=";" 
    cat ${FILE} | while read JARFILE GROUPID ARTIFACTID VERSIONID
    do
				echo "*** Check ${JARFILE}"
				if [[ "${JARFILE}" =~ http://* ]]
				then
						echo "*** Downloading Jar:${JARFILE}"
						wget ${JARFILE}
						JARFILE=`basename ${JARFILE}`
				fi
				jar2deb ${JARFILE} ${GROUPID:-unknowngrp} ${ARTIFACTID:-unknown} ${VERSIONID}
    done
else
		echo "jar2deb ${JARFILE} ${GROUPID} ${ARTIFACTID:-unknown} ${VERSIONID}"
    jar2deb ${JARFILE} ${GROUPID:-unknowngrp} ${ARTIFACTID:-unknown} ${VERSIONID}
fi
exit 0
#############################################################################
